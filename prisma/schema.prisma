// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  email           String           @unique
  nickname        String?
  image           String?
  password        String
  refreshToken    String?
  provider        String           @default("local")
  providerId      String?          @unique
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  articles        Article[]
  articleComments ArticleComment[]
  productComments ProductComment[]
  userPreferences UserPreference?
  favorites       Favorite[] // 좋아요 연결
  Product         Product[]
}

model UserPreference {
  id           Int      @id @default(autoincrement())
  receiveEmail Boolean
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
  userId       Int      @unique
}

model Product {
  id              Int              @id @default(autoincrement())
  name            String
  description     String?
  category        Category?
  price           Float
  stock           Int              @default(0)
  images          String[]
  tags            String[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  productComments ProductComment[]
  author          User?            @relation(fields: [authorId], references: [id])
  authorId        Int?
  favoriteCount   Int              @default(0) // 좋아요 갯수
  favoritedBy     Favorite[] // 좋아요 관계
}

model Article {
  id              Int              @id @default(autoincrement())
  title           String
  content         String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  author          User?            @relation(fields: [authorId], references: [id])
  authorId        Int?
  articleComments ArticleComment[]
  favoriteCount   Int              @default(0) // 좋아요 갯수
  favoritedBy     Favorite[] // 좋아요 관계
}

model Favorite {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product? @relation(fields: [productId], references: [id])
  productId Int?
  article   Article? @relation(fields: [articleId], references: [id])
  articleId Int?
  createdAt DateTime @default(now()) // 좋아요를 누른 시간
}

model ArticleComment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int?
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int
}

model ProductComment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int?
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}

enum Category {
  FASHION
  BEAUTY
  SPORTS
  ELECTRONICS
  HOME_INTERIOR
  HOUSEHOLD_SUPPLIES
  KITCHENWARE
}
