// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  email           String           @unique
  firstName       String
  lastName        String
  address         String?
  tags            String[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  articles        Article[]
  articleComments ArticleComment[]
  productComments ProductComment[]
  userPreferences UserPreference?
  savedProducts   Product[]
}

model UserPreference {
  id           String   @id @default(uuid())
  receiveEmail Boolean
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @unique
}

model Product {
  id              String           @id @default(uuid())
  name            String
  description     String?
  category        Category
  price           Float
  stock           Int
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  savedUsers      User[]
  tags            String[]
  productComments ProductComment[]
}

model Article {
  id              String           @id @default(uuid())
  title           String
  content         String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  user            User?            @relation(fields: [userId], references: [id])
  userId          String?
  articleComments ArticleComment[]
}

model ArticleComment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId String
}

model ProductComment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

enum Category {
  FASHION
  BEAUTY
  SPORTS
  ELECTRONICS
  HOME_INTERIOR
  HOUSEHOLD_SUPPLIES
  KITCHENWARE
}
